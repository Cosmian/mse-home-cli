"""Microservice Encryption application."""

import json
import os
from http import HTTPStatus
from pathlib import Path

from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from flask import Flask, Response

{{ app }} = Flask(__name__)

sealed_secret_json = Path(os.getenv("SEALED_SECRETS_PATH"))
secret_json = Path(os.getenv("SECRETS_PATH"))


@{{ app }}.get("{{ healthcheck_endpoint }}")
def health_check():
    """Health check of the application."""
    return Response(response="OK", status=HTTPStatus.OK)


@{{ app }}.route('/')
def hello():
    """Get a simple example."""
    return "Hello world"


def aes_encrypt(text: bytes, key: bytes) -> bytes:
    """Encrypt a text using AES-CBC."""
    iv = os.urandom(16)
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv))
    encryptor = cipher.encryptor()
    return iv + encryptor.update(text) + encryptor.finalize()


@app.route("/result/secrets")
def result_with_secret():
    """Get a simple result using secrets."""
    return aes_encrypt(
        b"secret message with secrets.json",
        bytes.fromhex(json.loads(secret_json.read_bytes())["key"]),
    )


@app.route("/result/sealed_secrets")
def result_with_sealed_secret():
    """Get a simple result using sealed secrets."""
    return aes_encrypt(
        b"message with sealed_secrets.json",
        bytes.fromhex(json.loads(sealed_secret_json.read_bytes())["key"]),
    )
